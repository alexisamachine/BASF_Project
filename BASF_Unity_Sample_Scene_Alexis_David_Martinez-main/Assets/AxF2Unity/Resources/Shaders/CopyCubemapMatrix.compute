#pragma kernel CSCopyCubemapArrayToMatrix
#pragma kernel CSCopyMatrixToCubemap
#pragma kernel CSCopyMatrixToArray

#ifndef STORAGE_HLSL
#define STORAGE_HLSL

#define DECLARE_MATRIX_INTERNAL(buffer, scalar, mat) \
    buffer<scalar> mat; \
    int mat##Start; \
    int mat##RowStride; \
    int mat##RowCount; \
    int mat##ColStride; \
    int mat##ColCount;

#define DECLARE_MATRIX(mat) DECLARE_MATRIX_INTERNAL(StructuredBuffer, float, mat)
#define DECLARE_MATRIX_RW(mat) DECLARE_MATRIX_INTERNAL(RWStructuredBuffer, float, mat)

#define MATRIX_AT(mat, r, c) mat[mat##Start + r * mat##RowStride + c * mat##ColStride]
#define MATRIX_ROW_COUNT(mat) mat##RowCount
#define MATRIX_COL_COUNT(mat) mat##ColCount

#define DECLARE_VECTOR_INTERNAL(buffer, scalar, vec) \
    RWStructuredBuffer<float> vec; \
    int vec##Start; \
    int vec##Stride; \
    int vec##Count;

#define DECLARE_VECTOR(vec) DECLARE_VECTOR_INTERNAL(StructuredBuffer, float, vec)
#define DECLARE_VECTOR_RW(vec) DECLARE_VECTOR_INTERNAL(RWStructuredBuffer, float, vec)

#define VECTOR_AT(vec, i) vec[vec##Start + i * vec##Stride]
#define VECTOR_SIZE(vec) vec##Count

#endif // STORAGE_HLSL

RWTexture2DArray<float4> _CubemapArray;
RWTexture2D<float4> _Array;

DECLARE_MATRIX(_InputMatrix);
DECLARE_MATRIX_RW(_OutputMatrix);

int _FaceSize;
int _ArraySize;

int4 _Indices;
float4 _ScalingFactors;

[numthreads(8, 8, 1)]
void CSCopyCubemapArrayToMatrix(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    // output matrix shape: (cubemap_faces * face_size * face_size, array_layers * channels)
    int colIndex = dispatchThreadID.x;
    int rowIndex = dispatchThreadID.y;

    int colCount = MATRIX_COL_COUNT(_OutputMatrix);
    int rowCount = MATRIX_ROW_COUNT(_OutputMatrix);

    if (colIndex >= colCount || rowIndex >= rowCount)
        return;

    int faceIdx = (rowIndex / _FaceSize / _FaceSize) % 6;
    int faceY = (rowIndex / _FaceSize) % _FaceSize;
    int faceX = rowIndex % _FaceSize;

    int arrayIdx = (colIndex / 3) % _ArraySize;
    int channel = colIndex % 3;

    float4 value = _CubemapArray[uint3(faceX, faceY, arrayIdx * 6 + faceIdx)];
    MATRIX_AT(_OutputMatrix, rowIndex, colIndex) = value[channel];
}

[numthreads(8, 8, 1)]
void CSCopyMatrixToCubemap(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    // _InputMatrix = Q
    // _CubemapArray = OutputCubemap
    // _Indices select 4 columns of Q

    int faceX = dispatchThreadID.x;
    int faceY = dispatchThreadID.y;
    int faceIdx = dispatchThreadID.z;

    if (faceX >= _FaceSize || faceY >= _FaceSize || faceIdx >= 6)
        return;

    int rowIndex = faceIdx * _FaceSize * _FaceSize + faceY * _FaceSize + faceX;

    // select columns
    float4 value;
    for (int i = 0; i < 4; ++i)
    {
        int colIndex = _Indices[i];
        value[i] = MATRIX_AT(_InputMatrix, rowIndex, colIndex);
    }

    _CubemapArray[uint3(faceX, faceY, faceIdx)] = value;
}

[numthreads(8, 4, 1)]
void CSCopyMatrixToArray(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    // _InputMatrix = P_T
    // _ScalingFactors = D[_Indices]
    // _Array = OutputArray
    // _Indices select 4 rows of P_T

    int arrayIndex = dispatchThreadID.x;
    int colorIndex = dispatchThreadID.y;

    if (arrayIndex >= _ArraySize || colorIndex >= 3)
        return;

    int colIndex = arrayIndex * 3 + colorIndex;

    // select rows
    float4 value;
    for (int i = 0; i < 4; ++i)
    {
        int rowIndex = _Indices[i];
        value[i] = MATRIX_AT(_InputMatrix, rowIndex, colIndex) * _ScalingFactors[i];
    }

    _Array[uint2(arrayIndex, colorIndex)] = value;
}
