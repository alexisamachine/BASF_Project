#pragma kernel CSMatrixEye
#pragma kernel CSMatrixBidiag
#pragma kernel CSMatrixCopy
#pragma kernel CSMatrixMul
#pragma kernel CSMatrixRowMean
#pragma kernel CSMatrixSubtractInplace
#pragma kernel CSMatrixError

#ifndef STORAGE_HLSL
#define STORAGE_HLSL

#define DECLARE_MATRIX_INTERNAL(buffer, scalar, mat) \
    buffer<scalar> mat; \
    int mat##Start; \
    int mat##RowStride; \
    int mat##RowCount; \
    int mat##ColStride; \
    int mat##ColCount;

#define DECLARE_MATRIX(mat) DECLARE_MATRIX_INTERNAL(StructuredBuffer, float, mat)
#define DECLARE_MATRIX_RW(mat) DECLARE_MATRIX_INTERNAL(RWStructuredBuffer, float, mat)

#define MATRIX_AT(mat, r, c) mat[mat##Start + r * mat##RowStride + c * mat##ColStride]
#define MATRIX_ROW_COUNT(mat) mat##RowCount
#define MATRIX_COL_COUNT(mat) mat##ColCount

#define DECLARE_VECTOR_INTERNAL(buffer, scalar, vec) \
    RWStructuredBuffer<float> vec; \
    int vec##Start; \
    int vec##Stride; \
    int vec##Count;

#define DECLARE_VECTOR(vec) DECLARE_VECTOR_INTERNAL(StructuredBuffer, float, vec)
#define DECLARE_VECTOR_RW(vec) DECLARE_VECTOR_INTERNAL(RWStructuredBuffer, float, vec)

#define VECTOR_AT(vec, i) vec[vec##Start + i * vec##Stride]
#define VECTOR_SIZE(vec) vec##Count

#endif // STORAGE_HLSL
#ifndef GROUPREDUCE_HLSL
#define GROUPREDUCE_HLSL

groupshared float sharedData[32];

float GroupReduce(float value, int tid)
{
    sharedData[tid] = value;

    // Final reduce in shared memory
    // barrier();
    AllMemoryBarrierWithGroupSync();

    if (tid < 16)
        sharedData[tid] += sharedData[tid + 16];
    AllMemoryBarrierWithGroupSync();

    if (tid < 8)
        sharedData[tid] += sharedData[tid + 8];
    AllMemoryBarrierWithGroupSync();

    if (tid < 4)
        sharedData[tid] += sharedData[tid + 4];
    AllMemoryBarrierWithGroupSync();

    if (tid < 2)
        sharedData[tid] += sharedData[tid + 2];
    AllMemoryBarrierWithGroupSync();

    if (tid < 1)
        sharedData[tid] += sharedData[tid + 1];
    AllMemoryBarrierWithGroupSync();

    return sharedData[0];
}

#endif // GROUPREDUCE_HLSL

DECLARE_MATRIX(_InputMatrix);
DECLARE_MATRIX(_SecondInputMatrix);
DECLARE_MATRIX_RW(_OutputMatrix);

DECLARE_VECTOR(_InputVector);
DECLARE_VECTOR(_SecondInputVector);

DECLARE_VECTOR_RW(_OutputVector);

[numthreads(8, 8, 1)]
void CSMatrixEye(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    int colIndex = dispatchThreadID.x;
    int rowIndex = dispatchThreadID.y;

    int rowCount = MATRIX_ROW_COUNT(_OutputMatrix);
    int colCount = MATRIX_COL_COUNT(_OutputMatrix);

    if (colIndex >= colCount || rowIndex >= rowCount)
        return;

    MATRIX_AT(_OutputMatrix, rowIndex, colIndex) = rowIndex == colIndex ? 1 : 0;
}

[numthreads(8, 8, 1)]
void CSMatrixBidiag(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    int colIndex = dispatchThreadID.x;
    int rowIndex = dispatchThreadID.y;

    int rowCount = MATRIX_ROW_COUNT(_OutputMatrix);
    int colCount = MATRIX_COL_COUNT(_OutputMatrix);

    if (colIndex >= colCount || rowIndex >= rowCount)
        return;

    float value = 0;
    if (rowIndex == colIndex)
        value = VECTOR_AT(_InputVector, rowIndex);
    else if (rowIndex+1 == colIndex)
        value = VECTOR_AT(_SecondInputVector, rowIndex);

    MATRIX_AT(_OutputMatrix, rowIndex, colIndex) = value;
}

[numthreads(8, 8, 1)]
void CSMatrixCopy(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    int colIndex = dispatchThreadID.x;
    int rowIndex = dispatchThreadID.y;

    int rowCount = MATRIX_ROW_COUNT(_OutputMatrix);
    int colCount = MATRIX_COL_COUNT(_OutputMatrix);

    if (colIndex >= colCount || rowIndex >= rowCount)
        return;

    float value = MATRIX_AT(_InputMatrix, rowIndex, colIndex);
    MATRIX_AT(_OutputMatrix, rowIndex, colIndex) = value;
}

[numthreads(1, 1, 32)]
void CSMatrixMul(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    int threadIndex = dispatchThreadID.z;
    int threadCount = 32;

    int colIndex = dispatchThreadID.x;
    int rowIndex = dispatchThreadID.y;

    int rowCount = MATRIX_ROW_COUNT(_OutputMatrix);
    int colCount = MATRIX_COL_COUNT(_OutputMatrix);
    int innerCount = MATRIX_COL_COUNT(_InputMatrix);

    float result = 0;
    if (colIndex < colCount && rowIndex < rowCount)
    {
        for (int i = threadIndex; i < innerCount; i += threadCount)
        {
            float lhs = MATRIX_AT(_InputMatrix, rowIndex, i);
            float rhs = MATRIX_AT(_SecondInputMatrix, i, colIndex);
            result += lhs * rhs;
        }
    }
    result = GroupReduce(result, threadIndex);

    if (threadIndex == 0)
        MATRIX_AT(_OutputMatrix, rowIndex, colIndex) = result;
}

[numthreads(32, 1, 1)]
void CSMatrixRowMean(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    int threadIndex = dispatchThreadID.x;
    int threadCount = 32;

    int rowIndex = dispatchThreadID.y;

    int colCount = MATRIX_COL_COUNT(_InputMatrix);

    float acc = 0;
    for (int i = threadIndex; i < colCount; i += threadCount)
    {
        acc += MATRIX_AT(_InputMatrix, rowIndex, i);
    }
    acc = GroupReduce(acc, threadIndex);

    float mean = acc / colCount;

    if (threadIndex == 0)
    {
        VECTOR_AT(_OutputVector, rowIndex) = mean;
    }
}

[numthreads(8, 8, 1)]
void CSMatrixSubtractInplace(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    int colIndex = dispatchThreadID.x;
    int rowIndex = dispatchThreadID.y;

    int colCount = MATRIX_COL_COUNT(_InputMatrix);
    int rowCount = MATRIX_ROW_COUNT(_InputMatrix);

    if (colIndex >= colCount || rowIndex >= rowCount)
        return;

    MATRIX_AT(_OutputMatrix, rowIndex, colIndex) -= MATRIX_AT(_InputMatrix, rowIndex, colIndex);
}

[numthreads(8, 4, 1)]
void CSMatrixError(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    int threadIndex = dispatchThreadID.x + 8*dispatchThreadID.y;
    int threadCount = 32;

    int colIndexStart = dispatchThreadID.x;
    int rowIndexStart = dispatchThreadID.y;

    int colStride = 8;
    int rowStride = 4;

    int rowCount = MATRIX_ROW_COUNT(_InputMatrix);
    int colCount = MATRIX_COL_COUNT(_InputMatrix);

    float result = 0;
    for (int rowIndex = rowIndexStart; rowIndex < rowCount; rowIndex += rowStride)
    {
        for (int colIndex = colIndexStart; colIndex < colCount; colIndex += colStride)
        {
            float value = MATRIX_AT(_InputMatrix, rowIndex, colIndex);
            result += abs(value);
        }
    }
    result = GroupReduce(result, threadIndex);

    if (threadIndex == 0)
    {
        VECTOR_AT(_OutputVector, 0) = result;
    }
}
